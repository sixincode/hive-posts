<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;

class CreateHivePostsTable extends Migration
{
    public function up()
    {
      $tableNames  = config('hive-posts.table_names');
      $columnNames = config('hive-posts.column_names');

      if (empty($tableNames)) {
        throw new \Exception('Error: config/hive-posts.php not loaded. Run [php artisan config:clear] and try again.');
      }
      if (empty($columnNames)) {
        throw new \Exception('Error: config/hive-posts.php not loaded. Run [php artisan config:clear] and try again.');
      }


      if(!Schema::hasTable($tableNames['posts'])) {
            Schema::create($tableNames['posts'], function (Blueprint $table) {
              $table->id();
              $table->descriptionFieldJson('title');
              $table->slugField();
              $table->descriptionFieldJson('content');
              $table->integer('views')->nullable();
              $table->string('url')->nullable();
              $table->isFeaturedField();
              $table->isPrivateField();
              $table->isActiveField();
              $table->sortOrderField();
              $table->globalUserField();
              $table->propertiesSchemaField();
              $table->dataSchemaField();
              $table->globalField();
              $table->morphToOwner();
              $table->softDeletes();
              $table->timestamps();
            });
          }

      if(!Schema::hasTable($tableNames['categories'])) {
            Schema::create($tableNames['categories'], function (Blueprint $table) {
              $table->id();
              $table->descriptionFieldJson('name');
              $table->slugFieldJson();
              $table->descriptionFieldJson('slogan');
              $table->descriptionFieldJson();
              $table->integer('level')->nullable();
              $table->string('type')->nullable();
              $table->isFeaturedField();
              $table->isPrivateField();
              $table->isActiveField();
              $table->isDefaultField();
              $table->sortOrderField();
              $table->propertiesSchemaField();
              $table->dataSchemaField();
              $table->globalField();
              $table->softDeletes();
              $table->timestamps();
            });
          }

        if(!Schema::hasTable($tableNames['categoriesx'])) {
          Schema::create($tableNames['categoriesx'], function (Blueprint $table) use ($tableNames){
              $table->foreignId(config('hive-posts.column_names.categories_morph_category'))
                    ->constrained($tableNames['categories'])
                    ->onDelete('cascade');

              $table->morphs(config('hive-posts.column_names.category_identifier'));
              $table->propertiesSchemaField();

              $table->unique([
                config('hive-posts.column_names.categories_morph_category'),
                config('hive-posts.column_names.categories_morph_id'),
                config('hive-posts.column_names.categories_morph_type')
              ]);
            });
          }

      if(!Schema::hasTable($tableNames['tags'])) {
            Schema::create($tableNames['tags'], function (Blueprint $table) {
              $table->id();
              $table->json('name');
              $table->slugFieldJson();
              $table->string('type')->nullable();
              $table->isActiveField();
              $table->isDefaultField();
              $table->propertiesSchemaField();
              $table->dataSchemaField();
              $table->globalField();
              $table->timestamps();
              $table->softDeletes();
            });
          }

        if(!Schema::hasTable($tableNames['tagsx'])) {
          Schema::create($tableNames['tagsx'], function (Blueprint $table) use ($tableNames){
              $table->foreignId(config('hive-posts.column_names.tags_morph_tag'))->constrained($tableNames['tags'])->onDelete('cascade');
              $table->morphs(config('hive-posts.column_names.tag_identifier'));

              $table->unique([
                config('hive-posts.column_names.tags_morph_tag'),
                config('hive-posts.column_names.tags_morph_id'),
                config('hive-posts.column_names.tags_morph_type')
              ]);
            });
          }
      }

      public function down()
      {
        $tableNames  = config('hive-posts.table_names');
        $columnNames = config('hive-posts.column_names');

        if (empty($tableNames)) {
          throw new \Exception('Error: config/hive-posts.php not loaded. Run [php artisan config:clear] and try again.');
        }
        if (empty($columnNames)) {
          throw new \Exception('Error: config/hive-posts.php not loaded. Run [php artisan config:clear] and try again.');
        }

        Schema::dropIfExists($tableNames['posts']);
        Schema::dropIfExists($tableNames['categories']);
        Schema::dropIfExists($tableNames['categoriesx']);
        Schema::dropIfExists($tableNames['tags']);
        Schema::dropIfExists($tableNames['tagsx']);
      }
};
